"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Modal_1 = require('../../providers/Modal');
var ModalConfig_1 = require('../../models/ModalConfig');
var FluentAssign_1 = require('./../../framework/FluentAssign');
/**
 * A Preset that knows about the modal service, and so can open a modal window on demand.
 * Use the fluent API to configure the preset and then invoke the 'open' method to open a modal
 * based on the preset.
 * ModalAwarePreset occupy the following properties:
 * - ModalConfig (size, isBlocking, keyboard): You can set them, if not they will get the
 * default values defined in the Modal service.
 * - component, modal, bindings: Preset values needed to fire up the modal.
 * - open: A Method used to open the modal window.
 */
var ModalAwarePreset = (function (_super) {
    __extends(ModalAwarePreset, _super);
    function ModalAwarePreset(defaultValues, initialSetters) {
        if (defaultValues === void 0) { defaultValues = undefined; }
        if (initialSetters === void 0) { initialSetters = undefined; }
        _super.call(this, defaultValues, initialSetters);
        // this is not needed as we get them via defaults.
        // but it "protects" overwrites since we set writeOnce=true.
        FluentAssign_1.setAssignMethod(this, 'modal', true);
        FluentAssign_1.setAssignMethod(this, 'component', true);
        FluentAssign_1.setAssignMethod(this, 'bindings', true);
        FluentAssign_1.setAssignMethod(this, 'size');
        FluentAssign_1.setAssignMethod(this, 'isBlocking');
        FluentAssign_1.setAssignMethod(this, 'keyboard');
        FluentAssign_1.setAssignMethod(this, 'dialogClass');
    }
    /**
     * Open a modal window based on the configuration of this config instance.
     * @param inside If set opens the modal inside the supplied elements ref at the specified anchor
     * @returns Promise<ModalDialogInstance>
     */
    ModalAwarePreset.prototype.open = function (viewContainer) {
        var config = this.toJSON();
        if (!(config.modal instanceof Modal_1.Modal)) {
            return Promise.reject(new Error('Configuration Error: modal service not set.'));
        }
        if (typeof config.bindings !== 'function') {
            return Promise.reject(new Error('Configuration Error: bindings not set.'));
        }
        if (viewContainer) {
            // TODO: Validate inside?
            return config.modal.openInside(config.component, viewContainer, config.bindings(config), new ModalConfig_1.ModalConfig(config.size, config.isBlocking, config.keyboard));
        }
        else {
            return config.modal.open(config.component, config.bindings(config), new ModalConfig_1.ModalConfig(config.size, config.isBlocking, config.keyboard, config.dialogClass));
        }
    };
    return ModalAwarePreset;
}(FluentAssign_1.FluentAssign));
exports.ModalAwarePreset = ModalAwarePreset;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTW9kYWxBd2FyZVByZXNldC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL2FuZ3VsYXIyLW1vZGFsL3ByZXNldHMvYmFzZS9Nb2RhbEF3YXJlUHJlc2V0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUNBLHNCQUFvQix1QkFBdUIsQ0FBQyxDQUFBO0FBQzVDLDRCQUE0RCwwQkFBMEIsQ0FBQyxDQUFBO0FBQ3ZGLDZCQUFnRSxnQ0FBZ0MsQ0FBQyxDQUFBO0FBVWpHOzs7Ozs7Ozs7R0FTRztBQUNIO0lBQXNFLG9DQUFlO0lBQ2pGLDBCQUFZLGFBQTRCLEVBQUUsY0FBb0M7UUFBbEUsNkJBQTRCLEdBQTVCLHlCQUE0QjtRQUFFLDhCQUFvQyxHQUFwQywwQkFBb0M7UUFDMUUsa0JBQU0sYUFBYSxFQUFFLGNBQWMsQ0FBQyxDQUFDO1FBQ3JDLGtEQUFrRDtRQUNsRCw0REFBNEQ7UUFDNUQsOEJBQWUsQ0FBQyxJQUFJLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ3JDLDhCQUFlLENBQUMsSUFBSSxFQUFFLFdBQVcsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUN6Qyw4QkFBZSxDQUFDLElBQUksRUFBRSxVQUFVLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFFeEMsOEJBQWUsQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDOUIsOEJBQWUsQ0FBQyxJQUFJLEVBQUUsWUFBWSxDQUFDLENBQUM7UUFDcEMsOEJBQWUsQ0FBQyxJQUFJLEVBQUUsVUFBVSxDQUFDLENBQUM7UUFDbEMsOEJBQWUsQ0FBQyxJQUFJLEVBQUUsYUFBYSxDQUFDLENBQUM7SUFDekMsQ0FBQztJQTRCRDs7OztPQUlHO0lBQ0gsK0JBQUksR0FBSixVQUFLLGFBQWdDO1FBQ2pDLElBQUksTUFBTSxHQUFNLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUU5QixFQUFFLENBQUMsQ0FBQyxDQUFFLENBQUMsTUFBTSxDQUFDLEtBQUssWUFBWSxhQUFLLENBQUUsQ0FBQyxDQUFDLENBQUM7WUFDckMsTUFBTSxDQUFNLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxLQUFLLENBQUMsNkNBQTZDLENBQUMsQ0FBQyxDQUFDO1FBQ3pGLENBQUM7UUFFRCxFQUFFLENBQUMsQ0FBQyxPQUFPLE1BQU0sQ0FBQyxRQUFRLEtBQUssVUFBVSxDQUFDLENBQUMsQ0FBQztZQUN4QyxNQUFNLENBQU0sT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEtBQUssQ0FBQyx3Q0FBd0MsQ0FBQyxDQUFDLENBQUM7UUFDcEYsQ0FBQztRQUVELEVBQUUsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUM7WUFDaEIseUJBQXlCO1lBQ3pCLE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FDMUIsTUFBTSxDQUFDLFNBQVMsRUFDaEIsYUFBYSxFQUNiLE1BQU0sQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLEVBQ3ZCLElBQUkseUJBQVcsQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxVQUFVLEVBQUUsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUN2RSxDQUFDO1FBQ0YsQ0FBQztRQUFDLElBQUksQ0FBQyxDQUFDO1lBQ0osTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUNwQixNQUFNLENBQUMsU0FBUyxFQUNoQixNQUFNLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxFQUN2QixJQUFJLHlCQUFXLENBQUMsTUFBTSxDQUFDLElBQUksRUFDdkIsTUFBTSxDQUFDLFVBQVUsRUFDakIsTUFBTSxDQUFDLFFBQVEsRUFDZixNQUFNLENBQUMsV0FBVyxDQUFDLENBQzFCLENBQUM7UUFDTixDQUFDO0lBQ0wsQ0FBQztJQUNMLHVCQUFDO0FBQUQsQ0FBQyxBQTVFRCxDQUFzRSwyQkFBWSxHQTRFakY7QUE1RVksd0JBQWdCLG1CQTRFNUIsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJlc29sdmVkUmVmbGVjdGl2ZVByb3ZpZGVyLCBWaWV3Q29udGFpbmVyUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge01vZGFsfSBmcm9tICcuLi8uLi9wcm92aWRlcnMvTW9kYWwnO1xuaW1wb3J0IHtJTW9kYWxDb25maWcsIE1vZGFsQ29uZmlnLCBCb290c3RyYXBNb2RhbFNpemV9IGZyb20gJy4uLy4uL21vZGVscy9Nb2RhbENvbmZpZyc7XG5pbXBvcnQge0ZsdWVudEFzc2lnbiwgRmx1ZW50QXNzaWduTWV0aG9kLCBzZXRBc3NpZ25NZXRob2R9IGZyb20gJy4vLi4vLi4vZnJhbWV3b3JrL0ZsdWVudEFzc2lnbic7XG5pbXBvcnQge01vZGFsRGlhbG9nSW5zdGFuY2V9IGZyb20gJy4uLy4uL21vZGVscy9Nb2RhbERpYWxvZ0luc3RhbmNlJztcblxuZXhwb3J0IGludGVyZmFjZSBNb2RhbEF3YXJlUHJlc2V0RGF0YSBleHRlbmRzIElNb2RhbENvbmZpZyB7XG4gICAgY29tcG9uZW50OiBhbnk7XG4gICAgbW9kYWw6IE1vZGFsO1xuICAgIGJpbmRpbmdzOiA8VD4oY29uZmlnOiBUKSA9PiBSZXNvbHZlZFJlZmxlY3RpdmVQcm92aWRlcltdO1xufVxuXG5cbi8qKlxuICogQSBQcmVzZXQgdGhhdCBrbm93cyBhYm91dCB0aGUgbW9kYWwgc2VydmljZSwgYW5kIHNvIGNhbiBvcGVuIGEgbW9kYWwgd2luZG93IG9uIGRlbWFuZC5cbiAqIFVzZSB0aGUgZmx1ZW50IEFQSSB0byBjb25maWd1cmUgdGhlIHByZXNldCBhbmQgdGhlbiBpbnZva2UgdGhlICdvcGVuJyBtZXRob2QgdG8gb3BlbiBhIG1vZGFsXG4gKiBiYXNlZCBvbiB0aGUgcHJlc2V0LlxuICogTW9kYWxBd2FyZVByZXNldCBvY2N1cHkgdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxuICogLSBNb2RhbENvbmZpZyAoc2l6ZSwgaXNCbG9ja2luZywga2V5Ym9hcmQpOiBZb3UgY2FuIHNldCB0aGVtLCBpZiBub3QgdGhleSB3aWxsIGdldCB0aGUgXG4gKiBkZWZhdWx0IHZhbHVlcyBkZWZpbmVkIGluIHRoZSBNb2RhbCBzZXJ2aWNlLiAgXG4gKiAtIGNvbXBvbmVudCwgbW9kYWwsIGJpbmRpbmdzOiBQcmVzZXQgdmFsdWVzIG5lZWRlZCB0byBmaXJlIHVwIHRoZSBtb2RhbC5cbiAqIC0gb3BlbjogQSBNZXRob2QgdXNlZCB0byBvcGVuIHRoZSBtb2RhbCB3aW5kb3cuXG4gKi9cbmV4cG9ydCBjbGFzcyBNb2RhbEF3YXJlUHJlc2V0PFQgZXh0ZW5kcyBNb2RhbEF3YXJlUHJlc2V0RGF0YT4gZXh0ZW5kcyBGbHVlbnRBc3NpZ248VD4ge1xuICAgIGNvbnN0cnVjdG9yKGRlZmF1bHRWYWx1ZXM6IFQgPSB1bmRlZmluZWQsIGluaXRpYWxTZXR0ZXJzOiBzdHJpbmdbXSA9IHVuZGVmaW5lZCkge1xuICAgICAgICBzdXBlcihkZWZhdWx0VmFsdWVzLCBpbml0aWFsU2V0dGVycyk7XG4gICAgICAgIC8vIHRoaXMgaXMgbm90IG5lZWRlZCBhcyB3ZSBnZXQgdGhlbSB2aWEgZGVmYXVsdHMuXG4gICAgICAgIC8vIGJ1dCBpdCBcInByb3RlY3RzXCIgb3ZlcndyaXRlcyBzaW5jZSB3ZSBzZXQgd3JpdGVPbmNlPXRydWUuXG4gICAgICAgIHNldEFzc2lnbk1ldGhvZCh0aGlzLCAnbW9kYWwnLCB0cnVlKTtcbiAgICAgICAgc2V0QXNzaWduTWV0aG9kKHRoaXMsICdjb21wb25lbnQnLCB0cnVlKTtcbiAgICAgICAgc2V0QXNzaWduTWV0aG9kKHRoaXMsICdiaW5kaW5ncycsIHRydWUpO1xuXG4gICAgICAgIHNldEFzc2lnbk1ldGhvZCh0aGlzLCAnc2l6ZScpO1xuICAgICAgICBzZXRBc3NpZ25NZXRob2QodGhpcywgJ2lzQmxvY2tpbmcnKTtcbiAgICAgICAgc2V0QXNzaWduTWV0aG9kKHRoaXMsICdrZXlib2FyZCcpO1xuICAgICAgICBzZXRBc3NpZ25NZXRob2QodGhpcywgJ2RpYWxvZ0NsYXNzJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2l6ZSBvZiB0aGUgbW9kYWwuXG4gICAgICogJ2xnJyBvciAnc20nIG9ubHkuXG4gICAgICogTk9URTogTm8gdmFsaWRhdGlvbi5cbiAgICAgKiBEZWZhdWx0IHRvICdsZydcbiAgICAgKi9cbiAgICBzaXplOiBGbHVlbnRBc3NpZ25NZXRob2Q8c3RyaW5nLCB0aGlzPjtcbiAgICAvKipcbiAgICAgKiBEZXNjcmliZXMgaWYgdGhlIG1vZGFsIGlzIGJsb2NraW5nIG1vZGFsLlxuICAgICAqIEEgQmxvY2tpbmcgbW9kYWwgaXMgbm90IGNsb3NhYmxlIGJ5IGNsaWNraW5nIG91dHNpZGUgb2YgdGhlIG1vZGFsIHdpbmRvdy5cbiAgICAgKiBEZWZhdWx0cyB0byBmYWxzZS5cbiAgICAgKi9cbiAgICBpc0Jsb2NraW5nOiBGbHVlbnRBc3NpZ25NZXRob2Q8Ym9vbGVhbiwgdGhpcz47XG4gICAgLyoqXG4gICAgICogS2V5Ym9hcmQgdmFsdWUvcyB0aGF0IGNsb3NlIHRoZSBtb2RhbC5cbiAgICAgKiBBY2NlcHRzIGVpdGhlciBhIHNpbmdsZSBudW1lcmljIHZhbHVlIG9yIGFuIGFycmF5IG9mIG51bWVyaWMgdmFsdWVzLlxuICAgICAqIEEgbW9kYWwgY2xvc2VkIGJ5IGEga2V5Ym9hcmQgc3Ryb2tlIHdpbGwgcmVzdWx0IGluIGEgJ3JlamVjdCcgbm90aWZpY2F0aW9uIGZyb20gdGhlIHByb21pc2UuXG4gICAgICogRGVmYXVsdHMgdG8gMjcsIHNldCBgbnVsbGAgaW1wbGljaXRseSB0byBkaXNhYmxlLlxuICAgICAqL1xuICAgIGtleWJvYXJkOiBGbHVlbnRBc3NpZ25NZXRob2Q8QXJyYXk8bnVtYmVyPiB8IG51bWJlciwgdGhpcz47XG4gICAgLyoqXG4gICAgICogQSBDbGFzcyBmb3IgdGhlIG1vZGFsIGRpYWxvZyBjb250YWluZXIuXG4gICAgICogRGVmYXVsdDogbW9kYWwtZGlhbG9nXG4gICAgICovXG4gICAgZGlhbG9nQ2xhc3M6IEZsdWVudEFzc2lnbk1ldGhvZDxCb290c3RyYXBNb2RhbFNpemUsIHRoaXM+O1xuXG4gICAgLyoqXG4gICAgICogT3BlbiBhIG1vZGFsIHdpbmRvdyBiYXNlZCBvbiB0aGUgY29uZmlndXJhdGlvbiBvZiB0aGlzIGNvbmZpZyBpbnN0YW5jZS5cbiAgICAgKiBAcGFyYW0gaW5zaWRlIElmIHNldCBvcGVucyB0aGUgbW9kYWwgaW5zaWRlIHRoZSBzdXBwbGllZCBlbGVtZW50cyByZWYgYXQgdGhlIHNwZWNpZmllZCBhbmNob3JcbiAgICAgKiBAcmV0dXJucyBQcm9taXNlPE1vZGFsRGlhbG9nSW5zdGFuY2U+XG4gICAgICovXG4gICAgb3Blbih2aWV3Q29udGFpbmVyPzogVmlld0NvbnRhaW5lclJlZik6IFByb21pc2U8TW9kYWxEaWFsb2dJbnN0YW5jZT4ge1xuICAgICAgICBsZXQgY29uZmlnOiBUID0gdGhpcy50b0pTT04oKTtcblxuICAgICAgICBpZiAoISAoY29uZmlnLm1vZGFsIGluc3RhbmNlb2YgTW9kYWwpICkge1xuICAgICAgICAgICAgcmV0dXJuIDxhbnk+UHJvbWlzZS5yZWplY3QobmV3IEVycm9yKCdDb25maWd1cmF0aW9uIEVycm9yOiBtb2RhbCBzZXJ2aWNlIG5vdCBzZXQuJykpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiBjb25maWcuYmluZGluZ3MgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHJldHVybiA8YW55PlByb21pc2UucmVqZWN0KG5ldyBFcnJvcignQ29uZmlndXJhdGlvbiBFcnJvcjogYmluZGluZ3Mgbm90IHNldC4nKSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodmlld0NvbnRhaW5lcikge1xuICAgICAgICAgICAgLy8gVE9ETzogVmFsaWRhdGUgaW5zaWRlP1xuICAgICAgICAgICAgcmV0dXJuIGNvbmZpZy5tb2RhbC5vcGVuSW5zaWRlKFxuICAgICAgICAgICAgICAgIGNvbmZpZy5jb21wb25lbnQsXG4gICAgICAgICAgICAgICAgdmlld0NvbnRhaW5lcixcbiAgICAgICAgICAgICAgICBjb25maWcuYmluZGluZ3MoY29uZmlnKSxcbiAgICAgICAgICAgICAgICBuZXcgTW9kYWxDb25maWcoY29uZmlnLnNpemUsIGNvbmZpZy5pc0Jsb2NraW5nLCBjb25maWcua2V5Ym9hcmQpXG4gICAgICAgICk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gY29uZmlnLm1vZGFsLm9wZW4oXG4gICAgICAgICAgICAgICAgY29uZmlnLmNvbXBvbmVudCxcbiAgICAgICAgICAgICAgICBjb25maWcuYmluZGluZ3MoY29uZmlnKSxcbiAgICAgICAgICAgICAgICBuZXcgTW9kYWxDb25maWcoY29uZmlnLnNpemUsXG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZy5pc0Jsb2NraW5nLFxuICAgICAgICAgICAgICAgICAgICBjb25maWcua2V5Ym9hcmQsXG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZy5kaWFsb2dDbGFzcylcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iXX0=