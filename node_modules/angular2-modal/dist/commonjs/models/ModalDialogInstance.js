"use strict";
var promise_1 = require('@angular/core/src/facade/promise');
/**
 * API to an open modal window.
 */
var ModalDialogInstance = (function () {
    function ModalDialogInstance(config) {
        this.config = config;
        this._resultDeferred = promise_1.PromiseWrapper.completer();
    }
    Object.defineProperty(ModalDialogInstance.prototype, "result", {
        /**
         * A Promise that is resolved on a close event and rejected on a dismiss event.
         * @returns {Promise<T>|any|*|Promise<any>}
         */
        get: function () {
            return this._resultDeferred.promise;
        },
        enumerable: true,
        configurable: true
    });
    /**
     *  Close the modal with a return value, i.e: result.
     */
    ModalDialogInstance.prototype.close = function (result) {
        if (result === void 0) { result = null; }
        if (this.contentRef.instance.beforeClose &&
            this.contentRef.instance.beforeClose() === true)
            return;
        this.destroy();
        this._resultDeferred.resolve(result);
    };
    /**
     *  Close the modal without a return value, i.e: cancelled.
     *  This call is automatically invoked when a user either:
     *  - Presses an exit keyboard key (if configured).
     *  - Clicks outside of the modal window (if configured).
     *  Usually, dismiss represent a Cancel button or a X button.
     */
    ModalDialogInstance.prototype.dismiss = function () {
        if (this.contentRef.instance.beforeDismiss &&
            this.contentRef.instance.beforeDismiss() === true)
            return;
        this.destroy();
        this._resultDeferred.reject();
    };
    ModalDialogInstance.prototype.destroy = function () { };
    return ModalDialogInstance;
}());
exports.ModalDialogInstance = ModalDialogInstance;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTW9kYWxEaWFsb2dJbnN0YW5jZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL2FuZ3VsYXIyLW1vZGFsL21vZGVscy9Nb2RhbERpYWxvZ0luc3RhbmNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQSx3QkFBNkIsa0NBQWtDLENBQUMsQ0FBQTtBQUloRTs7R0FFRztBQUNIO0lBU0ksNkJBQW1CLE1BQW1CO1FBQW5CLFdBQU0sR0FBTixNQUFNLENBQWE7UUFDbEMsSUFBSSxDQUFDLGVBQWUsR0FBRyx3QkFBYyxDQUFDLFNBQVMsRUFBRSxDQUFDO0lBQ3RELENBQUM7SUFNRCxzQkFBSSx1Q0FBTTtRQUpWOzs7V0FHRzthQUNIO1lBQ0ksTUFBTSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDO1FBQ3hDLENBQUM7OztPQUFBO0lBRUQ7O09BRUc7SUFDSCxtQ0FBSyxHQUFMLFVBQU0sTUFBa0I7UUFBbEIsc0JBQWtCLEdBQWxCLGFBQWtCO1FBQ3BCLEVBQUUsQ0FBQyxDQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLFdBQVc7WUFDakMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsV0FBVyxFQUFFLEtBQUssSUFBSyxDQUFDO1lBQUMsTUFBTSxDQUFDO1FBQ2pFLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUNmLElBQUksQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3pDLENBQUM7SUFFRDs7Ozs7O09BTUc7SUFDSCxxQ0FBTyxHQUFQO1FBQ0ksRUFBRSxDQUFDLENBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsYUFBYTtZQUN2QyxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxhQUFhLEVBQUUsS0FBSyxJQUFLLENBQUM7WUFBQyxNQUFNLENBQUM7UUFDL0QsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQ2YsSUFBSSxDQUFDLGVBQWUsQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUNsQyxDQUFDO0lBRU0scUNBQU8sR0FBZCxjQUFrQixDQUFDO0lBQ3ZCLDBCQUFDO0FBQUQsQ0FBQyxBQTlDRCxJQThDQztBQTlDWSwyQkFBbUIsc0JBOEMvQixDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDb21wb25lbnRSZWZ9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtQcm9taXNlV3JhcHBlcn0gZnJvbSAnQGFuZ3VsYXIvY29yZS9zcmMvZmFjYWRlL3Byb21pc2UnO1xuXG5pbXBvcnQge01vZGFsQ29uZmlnfSBmcm9tICcuLi9tb2RlbHMvTW9kYWxDb25maWcnO1xuXG4vKipcbiAqIEFQSSB0byBhbiBvcGVuIG1vZGFsIHdpbmRvdy5cbiAqL1xuZXhwb3J0IGNsYXNzIE1vZGFsRGlhbG9nSW5zdGFuY2Uge1xuICAgIGNvbnRlbnRSZWY6IENvbXBvbmVudFJlZjxhbnk+O1xuICAgIC8qKlxuICAgICAqIFN0YXRlcyBpZiB0aGUgbW9kYWwgaXMgaW5zaWRlIGEgc3BlY2lmaWMgZWxlbWVudC5cbiAgICAgKi9cbiAgICBwdWJsaWMgaW5FbGVtZW50OiBib29sZWFuO1xuXG4gICAgcHJpdmF0ZSBfcmVzdWx0RGVmZXJyZWQ6IGFueTtcblxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyBjb25maWc6IE1vZGFsQ29uZmlnKSB7XG4gICAgICAgIHRoaXMuX3Jlc3VsdERlZmVycmVkID0gUHJvbWlzZVdyYXBwZXIuY29tcGxldGVyKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBQcm9taXNlIHRoYXQgaXMgcmVzb2x2ZWQgb24gYSBjbG9zZSBldmVudCBhbmQgcmVqZWN0ZWQgb24gYSBkaXNtaXNzIGV2ZW50LlxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPFQ+fGFueXwqfFByb21pc2U8YW55Pn1cbiAgICAgKi9cbiAgICBnZXQgcmVzdWx0KCk6IFByb21pc2U8YW55PiB7XG4gICAgICAgIHJldHVybiB0aGlzLl9yZXN1bHREZWZlcnJlZC5wcm9taXNlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqICBDbG9zZSB0aGUgbW9kYWwgd2l0aCBhIHJldHVybiB2YWx1ZSwgaS5lOiByZXN1bHQuXG4gICAgICovXG4gICAgY2xvc2UocmVzdWx0OiBhbnkgPSBudWxsKSB7XG4gICAgICAgIGlmICggdGhpcy5jb250ZW50UmVmLmluc3RhbmNlLmJlZm9yZUNsb3NlICYmXG4gICAgICAgICAgICAgICAgdGhpcy5jb250ZW50UmVmLmluc3RhbmNlLmJlZm9yZUNsb3NlKCkgPT09IHRydWUgKSByZXR1cm47XG4gICAgICAgIHRoaXMuZGVzdHJveSgpO1xuICAgICAgICB0aGlzLl9yZXN1bHREZWZlcnJlZC5yZXNvbHZlKHJlc3VsdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogIENsb3NlIHRoZSBtb2RhbCB3aXRob3V0IGEgcmV0dXJuIHZhbHVlLCBpLmU6IGNhbmNlbGxlZC5cbiAgICAgKiAgVGhpcyBjYWxsIGlzIGF1dG9tYXRpY2FsbHkgaW52b2tlZCB3aGVuIGEgdXNlciBlaXRoZXI6XG4gICAgICogIC0gUHJlc3NlcyBhbiBleGl0IGtleWJvYXJkIGtleSAoaWYgY29uZmlndXJlZCkuXG4gICAgICogIC0gQ2xpY2tzIG91dHNpZGUgb2YgdGhlIG1vZGFsIHdpbmRvdyAoaWYgY29uZmlndXJlZCkuXG4gICAgICogIFVzdWFsbHksIGRpc21pc3MgcmVwcmVzZW50IGEgQ2FuY2VsIGJ1dHRvbiBvciBhIFggYnV0dG9uLlxuICAgICAqL1xuICAgIGRpc21pc3MoKSB7XG4gICAgICAgIGlmICggdGhpcy5jb250ZW50UmVmLmluc3RhbmNlLmJlZm9yZURpc21pc3MgJiZcbiAgICAgICAgICAgIHRoaXMuY29udGVudFJlZi5pbnN0YW5jZS5iZWZvcmVEaXNtaXNzKCkgPT09IHRydWUgKSByZXR1cm47XG4gICAgICAgIHRoaXMuZGVzdHJveSgpO1xuICAgICAgICB0aGlzLl9yZXN1bHREZWZlcnJlZC5yZWplY3QoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZGVzdHJveSgpIHt9XG59XG4iXX0=