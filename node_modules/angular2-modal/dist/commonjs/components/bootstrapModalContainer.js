"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require('@angular/core');
var ModalDialogInstance_1 = require('../models/ModalDialogInstance');
var Modal_1 = require('../providers/Modal');
/**
 * A component that acts as a top level container for an open modal window.
 */
var BootstrapModalContainer = (function () {
    function BootstrapModalContainer(dialog, _modal, _cr, _compileConfig) {
        this.dialog = dialog;
        this._modal = _modal;
        this._cr = _cr;
        this._compileConfig = _compileConfig;
        if (!dialog.inElement) {
            this.position = null;
        }
        else {
            this.position = 'absolute';
        }
    }
    BootstrapModalContainer.prototype.ngAfterViewInit = function () {
        var _this = this;
        this._cr.resolveComponent(this._compileConfig.component)
            .then(function (cmpFactory) {
            var vcr = _this._viewContainer, bindings = _this._compileConfig.bindings, ctxInjector = vcr.parentInjector;
            var childInjector = Array.isArray(bindings) && bindings.length > 0 ?
                core_1.ReflectiveInjector.fromResolvedProviders(bindings, ctxInjector) : ctxInjector;
            return _this.dialog.contentRef =
                vcr.createComponent(cmpFactory, vcr.length, childInjector);
        });
    };
    BootstrapModalContainer.prototype.onContainerClick = function ($event) {
        $event.stopPropagation();
    };
    BootstrapModalContainer.prototype.onClick = function () {
        return !this.dialog.config.isBlocking && this.dialog.dismiss();
    };
    BootstrapModalContainer.prototype.documentKeypress = function (event) {
        // check that this modal is the last in the stack.
        if (this._modal.stackPosition(this.dialog) !== this._modal.stackLength - 1)
            return;
        if (this.dialog.config.supportsKey(event.keyCode)) {
            this.dialog.dismiss();
        }
    };
    __decorate([
        core_1.ViewChild('modalDialog', { read: core_1.ViewContainerRef }), 
        __metadata('design:type', core_1.ViewContainerRef)
    ], BootstrapModalContainer.prototype, "_viewContainer", void 0);
    BootstrapModalContainer = __decorate([
        core_1.Component({
            selector: 'modal-container',
            host: {
                'tabindex': '-1',
                'role': 'dialog',
                'class': 'in modal',
                'style': 'display: block',
                '[style.position]': 'position',
                '(body:keydown)': 'documentKeypress($event)',
                '(click)': 'onClick()'
            },
            /* tslint:disable */
            template: "<div [ngClass]=\"dialog.config.dialogClass\"\n          [class.modal-lg]=\"dialog.config.size == 'lg'\"\n          [class.modal-sm]=\"dialog.config.size == 'sm'\">\n         <div class=\"modal-content\" \n              role=\"document\"\n              style=\"display: block\"\n              (click)=\"onContainerClick($event)\">\n            <div style=\"display: none\" #modalDialog></div>\n         </div>\n    </div>"
        }), 
        __metadata('design:paramtypes', [ModalDialogInstance_1.ModalDialogInstance, Modal_1.Modal, core_1.ComponentResolver, Modal_1.ModalCompileConfig])
    ], BootstrapModalContainer);
    return BootstrapModalContainer;
}());
exports.BootstrapModalContainer = BootstrapModalContainer;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYm9vdHN0cmFwTW9kYWxDb250YWluZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29tcG9uZW50cy9hbmd1bGFyMi1tb2RhbC9jb21wb25lbnRzL2Jvb3RzdHJhcE1vZGFsQ29udGFpbmVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQSxxQkFPTyxlQUFlLENBQUMsQ0FBQTtBQUV2QixvQ0FBa0MsK0JBQStCLENBQUMsQ0FBQTtBQUNsRSxzQkFBd0Msb0JBQW9CLENBQUMsQ0FBQTtBQUU3RDs7R0FFRztBQTBCSDtJQUlJLGlDQUFtQixNQUEyQixFQUMxQixNQUFhLEVBQ2IsR0FBc0IsRUFDdEIsY0FBa0M7UUFIbkMsV0FBTSxHQUFOLE1BQU0sQ0FBcUI7UUFDMUIsV0FBTSxHQUFOLE1BQU0sQ0FBTztRQUNiLFFBQUcsR0FBSCxHQUFHLENBQW1CO1FBQ3RCLG1CQUFjLEdBQWQsY0FBYyxDQUFvQjtRQUNsRCxFQUFFLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO1lBQ3BCLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDO1FBQ3pCLENBQUM7UUFBQyxJQUFJLENBQUMsQ0FBQztZQUNKLElBQUksQ0FBQyxRQUFRLEdBQUcsVUFBVSxDQUFDO1FBQy9CLENBQUM7SUFDTCxDQUFDO0lBRUQsaURBQWUsR0FBZjtRQUFBLGlCQVlDO1FBWEcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLFNBQVMsQ0FBQzthQUNuRCxJQUFJLENBQUMsVUFBQSxVQUFVO1lBQ1osSUFBTSxHQUFHLEdBQUcsS0FBSSxDQUFDLGNBQWMsRUFDM0IsUUFBUSxHQUFHLEtBQUksQ0FBQyxjQUFjLENBQUMsUUFBUSxFQUN2QyxXQUFXLEdBQUcsR0FBRyxDQUFDLGNBQWMsQ0FBQztZQUVyQyxJQUFNLGFBQWEsR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLFFBQVEsQ0FBQyxNQUFNLEdBQUcsQ0FBQztnQkFDaEUseUJBQWtCLENBQUMscUJBQXFCLENBQUMsUUFBUSxFQUFFLFdBQVcsQ0FBQyxHQUFHLFdBQVcsQ0FBQztZQUNsRixNQUFNLENBQUMsS0FBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVO2dCQUN6QixHQUFHLENBQUMsZUFBZSxDQUFDLFVBQVUsRUFBRSxHQUFHLENBQUMsTUFBTSxFQUFFLGFBQWEsQ0FBQyxDQUFDO1FBQ25FLENBQUMsQ0FBQyxDQUFDO0lBQ1gsQ0FBQztJQUVELGtEQUFnQixHQUFoQixVQUFpQixNQUFXO1FBQ3hCLE1BQU0sQ0FBQyxlQUFlLEVBQUUsQ0FBQztJQUM3QixDQUFDO0lBRUQseUNBQU8sR0FBUDtRQUNJLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLFVBQVUsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQ25FLENBQUM7SUFFRCxrREFBZ0IsR0FBaEIsVUFBaUIsS0FBb0I7UUFDakMsa0RBQWtEO1FBQ2xELEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsR0FBRyxDQUFDLENBQUM7WUFBQyxNQUFNLENBQUM7UUFFbkYsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDaEQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUMxQixDQUFDO0lBQ0wsQ0FBQztJQTFDRDtRQUFDLGdCQUFTLENBQUMsYUFBYSxFQUFFLEVBQUMsSUFBSSxFQUFFLHVCQUFnQixFQUFDLENBQUM7O21FQUFBO0lBM0J2RDtRQUFDLGdCQUFTLENBQUM7WUFDUCxRQUFRLEVBQUUsaUJBQWlCO1lBQzNCLElBQUksRUFBRTtnQkFDRixVQUFVLEVBQUUsSUFBSTtnQkFDaEIsTUFBTSxFQUFFLFFBQVE7Z0JBQ2hCLE9BQU8sRUFBRSxVQUFVO2dCQUNuQixPQUFPLEVBQUUsZ0JBQWdCO2dCQUN6QixrQkFBa0IsRUFBRSxVQUFVO2dCQUM5QixnQkFBZ0IsRUFBRSwwQkFBMEI7Z0JBQzVDLFNBQVMsRUFBRSxXQUFXO2FBQ3pCO1lBQ0Qsb0JBQW9CO1lBQ3BCLFFBQVEsRUFDUixzYUFTTztTQUVWLENBQUM7OytCQUFBO0lBOENGLDhCQUFDO0FBQUQsQ0FBQyxBQTdDRCxJQTZDQztBQTdDWSwrQkFBdUIsMEJBNkNuQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgICBDb21wb25lbnQsXG4gICAgQ29tcG9uZW50UmVzb2x2ZXIsXG4gICAgVmlld0NvbnRhaW5lclJlZixcbiAgICBSZWZsZWN0aXZlSW5qZWN0b3IsXG4gICAgVmlld0NoaWxkLFxuICAgIEFmdGVyVmlld0luaXRcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7TW9kYWxEaWFsb2dJbnN0YW5jZX0gZnJvbSAnLi4vbW9kZWxzL01vZGFsRGlhbG9nSW5zdGFuY2UnO1xuaW1wb3J0IHtNb2RhbCwgTW9kYWxDb21waWxlQ29uZmlnfSBmcm9tICcuLi9wcm92aWRlcnMvTW9kYWwnO1xuXG4vKipcbiAqIEEgY29tcG9uZW50IHRoYXQgYWN0cyBhcyBhIHRvcCBsZXZlbCBjb250YWluZXIgZm9yIGFuIG9wZW4gbW9kYWwgd2luZG93LlxuICovXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ21vZGFsLWNvbnRhaW5lcicsXG4gICAgaG9zdDoge1xuICAgICAgICAndGFiaW5kZXgnOiAnLTEnLFxuICAgICAgICAncm9sZSc6ICdkaWFsb2cnLFxuICAgICAgICAnY2xhc3MnOiAnaW4gbW9kYWwnLFxuICAgICAgICAnc3R5bGUnOiAnZGlzcGxheTogYmxvY2snLFxuICAgICAgICAnW3N0eWxlLnBvc2l0aW9uXSc6ICdwb3NpdGlvbicsXG4gICAgICAgICcoYm9keTprZXlkb3duKSc6ICdkb2N1bWVudEtleXByZXNzKCRldmVudCknLFxuICAgICAgICAnKGNsaWNrKSc6ICdvbkNsaWNrKCknXG4gICAgfSxcbiAgICAvKiB0c2xpbnQ6ZGlzYWJsZSAqL1xuICAgIHRlbXBsYXRlOlxuICAgIGA8ZGl2IFtuZ0NsYXNzXT1cImRpYWxvZy5jb25maWcuZGlhbG9nQ2xhc3NcIlxuICAgICAgICAgIFtjbGFzcy5tb2RhbC1sZ109XCJkaWFsb2cuY29uZmlnLnNpemUgPT0gXFwnbGdcXCdcIlxuICAgICAgICAgIFtjbGFzcy5tb2RhbC1zbV09XCJkaWFsb2cuY29uZmlnLnNpemUgPT0gXFwnc21cXCdcIj5cbiAgICAgICAgIDxkaXYgY2xhc3M9XCJtb2RhbC1jb250ZW50XCIgXG4gICAgICAgICAgICAgIHJvbGU9XCJkb2N1bWVudFwiXG4gICAgICAgICAgICAgIHN0eWxlPVwiZGlzcGxheTogYmxvY2tcIlxuICAgICAgICAgICAgICAoY2xpY2spPVwib25Db250YWluZXJDbGljaygkZXZlbnQpXCI+XG4gICAgICAgICAgICA8ZGl2IHN0eWxlPVwiZGlzcGxheTogbm9uZVwiICNtb2RhbERpYWxvZz48L2Rpdj5cbiAgICAgICAgIDwvZGl2PlxuICAgIDwvZGl2PmBcbiAgICAvKiB0c2xpbnQ6ZW5hYmxlICovXG59KVxuZXhwb3J0IGNsYXNzIEJvb3RzdHJhcE1vZGFsQ29udGFpbmVyIGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCB7XG4gICAgcHVibGljIHBvc2l0aW9uOiBzdHJpbmc7XG4gICAgQFZpZXdDaGlsZCgnbW9kYWxEaWFsb2cnLCB7cmVhZDogVmlld0NvbnRhaW5lclJlZn0pIHByaXZhdGUgX3ZpZXdDb250YWluZXI6IFZpZXdDb250YWluZXJSZWY7XG5cbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgZGlhbG9nOiBNb2RhbERpYWxvZ0luc3RhbmNlLFxuICAgICAgICAgICAgICAgIHByaXZhdGUgX21vZGFsOiBNb2RhbCxcbiAgICAgICAgICAgICAgICBwcml2YXRlIF9jcjogQ29tcG9uZW50UmVzb2x2ZXIsXG4gICAgICAgICAgICAgICAgcHJpdmF0ZSBfY29tcGlsZUNvbmZpZzogTW9kYWxDb21waWxlQ29uZmlnKSB7XG4gICAgICAgIGlmICghZGlhbG9nLmluRWxlbWVudCkge1xuICAgICAgICAgICAgdGhpcy5wb3NpdGlvbiA9IG51bGw7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcbiAgICAgICAgdGhpcy5fY3IucmVzb2x2ZUNvbXBvbmVudCh0aGlzLl9jb21waWxlQ29uZmlnLmNvbXBvbmVudClcbiAgICAgICAgICAgIC50aGVuKGNtcEZhY3RvcnkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHZjciA9IHRoaXMuX3ZpZXdDb250YWluZXIsXG4gICAgICAgICAgICAgICAgICAgIGJpbmRpbmdzID0gdGhpcy5fY29tcGlsZUNvbmZpZy5iaW5kaW5ncyxcbiAgICAgICAgICAgICAgICAgICAgY3R4SW5qZWN0b3IgPSB2Y3IucGFyZW50SW5qZWN0b3I7XG5cbiAgICAgICAgICAgICAgICBjb25zdCBjaGlsZEluamVjdG9yID0gQXJyYXkuaXNBcnJheShiaW5kaW5ncykgJiYgYmluZGluZ3MubGVuZ3RoID4gMCA/XG4gICAgICAgICAgICAgICAgICAgIFJlZmxlY3RpdmVJbmplY3Rvci5mcm9tUmVzb2x2ZWRQcm92aWRlcnMoYmluZGluZ3MsIGN0eEluamVjdG9yKSA6IGN0eEluamVjdG9yO1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmRpYWxvZy5jb250ZW50UmVmID1cbiAgICAgICAgICAgICAgICAgICAgdmNyLmNyZWF0ZUNvbXBvbmVudChjbXBGYWN0b3J5LCB2Y3IubGVuZ3RoLCBjaGlsZEluamVjdG9yKTtcbiAgICAgICAgICAgIH0pO1xuICAgIH1cblxuICAgIG9uQ29udGFpbmVyQ2xpY2soJGV2ZW50OiBhbnkpIHtcbiAgICAgICAgJGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIH1cblxuICAgIG9uQ2xpY2soKSB7XG4gICAgICAgIHJldHVybiAhdGhpcy5kaWFsb2cuY29uZmlnLmlzQmxvY2tpbmcgJiYgdGhpcy5kaWFsb2cuZGlzbWlzcygpO1xuICAgIH1cblxuICAgIGRvY3VtZW50S2V5cHJlc3MoZXZlbnQ6IEtleWJvYXJkRXZlbnQpIHtcbiAgICAgICAgLy8gY2hlY2sgdGhhdCB0aGlzIG1vZGFsIGlzIHRoZSBsYXN0IGluIHRoZSBzdGFjay5cbiAgICAgICAgaWYgKHRoaXMuX21vZGFsLnN0YWNrUG9zaXRpb24odGhpcy5kaWFsb2cpICE9PSB0aGlzLl9tb2RhbC5zdGFja0xlbmd0aCAtIDEpIHJldHVybjtcblxuICAgICAgICBpZiAodGhpcy5kaWFsb2cuY29uZmlnLnN1cHBvcnRzS2V5KGV2ZW50LmtleUNvZGUpKSB7XG4gICAgICAgICAgICB0aGlzLmRpYWxvZy5kaXNtaXNzKCk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iXX0=