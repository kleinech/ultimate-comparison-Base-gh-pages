"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var core_1 = require('@angular/core');
var ModalInstanceStack_1 = require('../framework/ModalInstanceStack');
var ModalConfig_1 = require('../models/ModalConfig');
var ModalDialogInstance_1 = require('../models/ModalDialogInstance');
var modalBackdrop_1 = require('../components/modalBackdrop');
var presets_1 = require('../presets');
var _stack = new ModalInstanceStack_1.ModalInstanceStack();
var ModalCompileConfig = (function () {
    function ModalCompileConfig(component, bindings) {
        this.component = component;
        this.bindings = bindings;
    }
    return ModalCompileConfig;
}());
exports.ModalCompileConfig = ModalCompileConfig;
var Modal = (function () {
    function Modal(_cr, _renderer, defaultConfig) {
        // The Modal class should be an application wide service (i.e: singleton).
        // This will run once in most applications...
        // If the user provides a ModalConfig instance to the DI,
        // the custom config will be the default one.
        this._cr = _cr;
        this._renderer = _renderer;
        Object.defineProperty(this, 'config', {
            configurable: false,
            enumerable: true,
            value: (defaultConfig)
                ? ModalConfig_1.ModalConfig.makeValid(defaultConfig) : ModalConfig_1.ModalConfig.makeValid(new ModalConfig_1.ModalConfig()),
            writable: false
        });
    }
    Modal.prototype.alert = function () {
        return new presets_1.OneButtonPreset(this, { isBlocking: false });
    };
    Modal.prototype.prompt = function () {
        return new presets_1.OneButtonPreset(this, { isBlocking: true, keyboard: null });
    };
    Modal.prototype.confirm = function () {
        return new presets_1.TwoButtonPreset(this, { isBlocking: true, keyboard: null });
    };
    /**
     * Opens a modal window blocking the whole screen.
     * @param component The angular Component to render as modal.
     * @param bindings Resolved providers that will inject into the component provided.
     * @param config A Modal Configuration object.
     * @returns {Promise<ModalDialogInstance>}
     */
    Modal.prototype.open = function (component, bindings, config) {
        return this.openInside(component, this.defaultViewContainer, bindings, config);
    };
    /**
     * Opens a modal window inside an existing component.
     * @param component The angular Component to render as modal.
     * @param viewContainer The viewContainer to block using the modal.
     * @param bindings Resolved providers that will inject into the component provided.
     * @param config A Modal Configuration object.
     * @returns {Promise<ModalDialogInstance>}
     */
    Modal.prototype.openInside = function (component, viewContainer, bindings, config) {
        config = (config) ? ModalConfig_1.ModalConfig.makeValid(config, this.config) : this.config;
        var dialog = new ModalDialogInstance_1.ModalDialogInstance(config);
        var compileConfig = new ModalCompileConfig(component, bindings || []);
        dialog.inElement = viewContainer !== this.defaultViewContainer;
        var dialogBindings = core_1.ReflectiveInjector.resolve([
            new core_1.Provider(Modal, { useValue: this }),
            new core_1.Provider(ModalDialogInstance_1.ModalDialogInstance, { useValue: dialog }),
            new core_1.Provider(ModalCompileConfig, { useValue: compileConfig })
        ]);
        return this.createBackdrop(viewContainer, dialogBindings, dialog.inElement)
            .then(function (backdropRef) {
            // killing the root (backdrop) will cascade automatically.
            dialog.destroy = function () { return backdropRef.destroy(); };
            _stack.pushManaged(dialog);
            return dialog;
        });
    };
    Modal.prototype.stackPosition = function (mInstance) {
        return _stack.indexOf(mInstance);
    };
    Object.defineProperty(Modal.prototype, "stackLength", {
        get: function () {
            return _stack.length;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Creates backdrop element.
     * @param  viewContainer The viewContainer to block using the modal.
     * @param  bindings Resolved providers, must contain the ModalDialogInstance
     *         instance for this backdrop.
     * @param  attachToBody Attach to body or leave in the original view of the viewContainer.
     * @returns {Promise<ComponentRef>}
     */
    Modal.prototype.createBackdrop = function (viewContainer, bindings, attachToBody) {
        var _this = this;
        return this._cr.resolveComponent(modalBackdrop_1.ModalBackdrop)
            .then(function (cmpFactory) {
            var ctxInjector = viewContainer.parentInjector;
            var childInjector = Array.isArray(bindings) && bindings.length > 0 ?
                core_1.ReflectiveInjector.fromResolvedProviders(bindings, ctxInjector) : ctxInjector;
            return viewContainer.createComponent(cmpFactory, viewContainer.length, childInjector);
        })
            .then(function (cmpRef) {
            if (attachToBody) {
                _this._renderer.invokeElementMethod(viewContainer.element.nativeElement, 'appendChild', [cmpRef.hostView.rootNodes[0]]);
            }
            else {
                document.body.appendChild(cmpRef.hostView.rootNodes[0]);
            }
            return cmpRef;
        });
    };
    Modal = __decorate([
        core_1.Injectable(),
        __param(2, core_1.Optional()), 
        __metadata('design:paramtypes', [core_1.ComponentResolver, core_1.Renderer, ModalConfig_1.ModalConfig])
    ], Modal);
    return Modal;
}());
exports.Modal = Modal;
exports.MODAL_PROVIDERS = [
    new core_1.Provider(Modal, { useClass: Modal }),
    new core_1.Provider(ModalConfig_1.ModalConfig, { useValue: new ModalConfig_1.ModalConfig('lg', true, 27) })
];
//# sourceMappingURL=data:application/json;base64,