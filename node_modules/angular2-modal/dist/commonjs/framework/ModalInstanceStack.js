"use strict";
var dom_adapter_1 = require('@angular/platform-browser/src/dom/dom_adapter');
/**
 * A dumb stack implementation over an array.
 */
var ModalInstanceStack = (function () {
    function ModalInstanceStack() {
        this._stack = [];
    }
    ModalInstanceStack.prototype.push = function (mInstance) {
        var idx = this._stack.indexOf(mInstance);
        if (idx === -1)
            this._stack.push(mInstance);
        /* TODO: this is wrong for several reasons:
         1) This is a direct DOM access we need to find another way or to separate it.
         2) It not the place for it.
         3) It doesn't care if its a modal inside an element or a wide open one.
         If its inside an element we need to add the 'modal-open' to that element.
         If its wide open we add to the body, we need to traverse the stack every time
         know what's going on and do it.
         */
        var DOM = dom_adapter_1.getDOM();
        if (DOM && this._stack.length === 1) {
            DOM.addClass(DOM.query('body'), 'modal-open');
        }
    };
    /**
     * Push a ModalDialogInstance into the stack and manage it so when it's done
     * it will automatically kick itself out of the stack.
     * @param mInstance
     */
    ModalInstanceStack.prototype.pushManaged = function (mInstance) {
        var _this = this;
        this.push(mInstance);
        mInstance.result
            .then(function () { return _this.remove(mInstance); })
            .catch(function () { return _this.remove(mInstance); });
        // we don't "pop" because we can't know for sure that our instance is the last.
        // In a user event world it will be the last, but since modals can close programmatically
        // we can't tell.
    };
    ModalInstanceStack.prototype.pop = function () {
        this._stack.pop();
    };
    /**
     * Remove a ModalDialogInstance from the stack.
     * @param mInstance
     */
    ModalInstanceStack.prototype.remove = function (mInstance) {
        var idx = this._stack.indexOf(mInstance);
        if (idx > -1)
            this._stack.splice(idx, 1);
        var DOM = dom_adapter_1.getDOM();
        if (DOM && this._stack.length === 0) {
            DOM.removeClass(DOM.query('body'), 'modal-open');
        }
    };
    ModalInstanceStack.prototype.index = function (index) {
        return this._stack[index];
    };
    ModalInstanceStack.prototype.indexOf = function (mInstance) {
        return this._stack.indexOf(mInstance);
    };
    Object.defineProperty(ModalInstanceStack.prototype, "length", {
        get: function () {
            return this._stack.length;
        },
        enumerable: true,
        configurable: true
    });
    return ModalInstanceStack;
}());
exports.ModalInstanceStack = ModalInstanceStack;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTW9kYWxJbnN0YW5jZVN0YWNrLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvYW5ndWxhcjItbW9kYWwvZnJhbWV3b3JrL01vZGFsSW5zdGFuY2VTdGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ0EsNEJBQXVCLCtDQUErQyxDQUFDLENBQUE7QUFFdkU7O0dBRUc7QUFDSDtJQUFBO1FBQ1ksV0FBTSxHQUEwQixFQUFFLENBQUM7SUFpRS9DLENBQUM7SUE5REcsaUNBQUksR0FBSixVQUFLLFNBQThCO1FBQy9CLElBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ3pDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQztZQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBRTVDOzs7Ozs7O1dBT0c7UUFDSCxJQUFNLEdBQUcsR0FBRyxvQkFBTSxFQUFFLENBQUM7UUFDckIsRUFBRSxDQUFDLENBQUMsR0FBRyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDbEMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxFQUFFLFlBQVksQ0FBQyxDQUFDO1FBQ2xELENBQUM7SUFDTCxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILHdDQUFXLEdBQVgsVUFBWSxTQUE4QjtRQUExQyxpQkFRQztRQVBHLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDckIsU0FBUyxDQUFDLE1BQU07YUFDWCxJQUFJLENBQUMsY0FBTSxPQUFBLEtBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLEVBQXRCLENBQXNCLENBQUM7YUFDbEMsS0FBSyxDQUFDLGNBQU0sT0FBQSxLQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxFQUF0QixDQUFzQixDQUFDLENBQUM7UUFDekMsK0VBQStFO1FBQy9FLHlGQUF5RjtRQUN6RixpQkFBaUI7SUFDckIsQ0FBQztJQUVELGdDQUFHLEdBQUg7UUFDSSxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ3RCLENBQUM7SUFFRDs7O09BR0c7SUFDSCxtQ0FBTSxHQUFOLFVBQU8sU0FBOEI7UUFDakMsSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDekMsRUFBRSxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDO1lBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ3pDLElBQU0sR0FBRyxHQUFHLG9CQUFNLEVBQUUsQ0FBQztRQUNyQixFQUFFLENBQUMsQ0FBQyxHQUFHLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNsQyxHQUFHLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEVBQUUsWUFBWSxDQUFDLENBQUM7UUFDckQsQ0FBQztJQUNMLENBQUM7SUFHRCxrQ0FBSyxHQUFMLFVBQU0sS0FBYTtRQUNmLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzlCLENBQUM7SUFFRCxvQ0FBTyxHQUFQLFVBQVEsU0FBOEI7UUFDbEMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQzFDLENBQUM7SUFFRCxzQkFBSSxzQ0FBTTthQUFWO1lBQ0ksTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDO1FBQzlCLENBQUM7OztPQUFBO0lBQ0wseUJBQUM7QUFBRCxDQUFDLEFBbEVELElBa0VDO0FBbEVZLDBCQUFrQixxQkFrRTlCLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge01vZGFsRGlhbG9nSW5zdGFuY2V9IGZyb20gJy4uL21vZGVscy9Nb2RhbERpYWxvZ0luc3RhbmNlJztcbmltcG9ydCB7IGdldERPTSB9IGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXIvc3JjL2RvbS9kb21fYWRhcHRlcic7XG5cbi8qKlxuICogQSBkdW1iIHN0YWNrIGltcGxlbWVudGF0aW9uIG92ZXIgYW4gYXJyYXkuXG4gKi9cbmV4cG9ydCBjbGFzcyBNb2RhbEluc3RhbmNlU3RhY2sge1xuICAgIHByaXZhdGUgX3N0YWNrOiBNb2RhbERpYWxvZ0luc3RhbmNlW10gPSBbXTtcblxuXG4gICAgcHVzaChtSW5zdGFuY2U6IE1vZGFsRGlhbG9nSW5zdGFuY2UpOiB2b2lkIHtcbiAgICAgICAgbGV0IGlkeCA9IHRoaXMuX3N0YWNrLmluZGV4T2YobUluc3RhbmNlKTtcbiAgICAgICAgaWYgKGlkeCA9PT0gLTEpIHRoaXMuX3N0YWNrLnB1c2gobUluc3RhbmNlKTtcblxuICAgICAgICAvKiBUT0RPOiB0aGlzIGlzIHdyb25nIGZvciBzZXZlcmFsIHJlYXNvbnM6XG4gICAgICAgICAxKSBUaGlzIGlzIGEgZGlyZWN0IERPTSBhY2Nlc3Mgd2UgbmVlZCB0byBmaW5kIGFub3RoZXIgd2F5IG9yIHRvIHNlcGFyYXRlIGl0LlxuICAgICAgICAgMikgSXQgbm90IHRoZSBwbGFjZSBmb3IgaXQuXG4gICAgICAgICAzKSBJdCBkb2Vzbid0IGNhcmUgaWYgaXRzIGEgbW9kYWwgaW5zaWRlIGFuIGVsZW1lbnQgb3IgYSB3aWRlIG9wZW4gb25lLlxuICAgICAgICAgSWYgaXRzIGluc2lkZSBhbiBlbGVtZW50IHdlIG5lZWQgdG8gYWRkIHRoZSAnbW9kYWwtb3BlbicgdG8gdGhhdCBlbGVtZW50LlxuICAgICAgICAgSWYgaXRzIHdpZGUgb3BlbiB3ZSBhZGQgdG8gdGhlIGJvZHksIHdlIG5lZWQgdG8gdHJhdmVyc2UgdGhlIHN0YWNrIGV2ZXJ5IHRpbWVcbiAgICAgICAgIGtub3cgd2hhdCdzIGdvaW5nIG9uIGFuZCBkbyBpdC5cbiAgICAgICAgICovXG4gICAgICAgIGNvbnN0IERPTSA9IGdldERPTSgpO1xuICAgICAgICBpZiAoRE9NICYmIHRoaXMuX3N0YWNrLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgRE9NLmFkZENsYXNzKERPTS5xdWVyeSgnYm9keScpLCAnbW9kYWwtb3BlbicpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUHVzaCBhIE1vZGFsRGlhbG9nSW5zdGFuY2UgaW50byB0aGUgc3RhY2sgYW5kIG1hbmFnZSBpdCBzbyB3aGVuIGl0J3MgZG9uZVxuICAgICAqIGl0IHdpbGwgYXV0b21hdGljYWxseSBraWNrIGl0c2VsZiBvdXQgb2YgdGhlIHN0YWNrLlxuICAgICAqIEBwYXJhbSBtSW5zdGFuY2VcbiAgICAgKi9cbiAgICBwdXNoTWFuYWdlZChtSW5zdGFuY2U6IE1vZGFsRGlhbG9nSW5zdGFuY2UpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5wdXNoKG1JbnN0YW5jZSk7XG4gICAgICAgIG1JbnN0YW5jZS5yZXN1bHRcbiAgICAgICAgICAgIC50aGVuKCgpID0+IHRoaXMucmVtb3ZlKG1JbnN0YW5jZSkpXG4gICAgICAgICAgICAuY2F0Y2goKCkgPT4gdGhpcy5yZW1vdmUobUluc3RhbmNlKSk7XG4gICAgICAgIC8vIHdlIGRvbid0IFwicG9wXCIgYmVjYXVzZSB3ZSBjYW4ndCBrbm93IGZvciBzdXJlIHRoYXQgb3VyIGluc3RhbmNlIGlzIHRoZSBsYXN0LlxuICAgICAgICAvLyBJbiBhIHVzZXIgZXZlbnQgd29ybGQgaXQgd2lsbCBiZSB0aGUgbGFzdCwgYnV0IHNpbmNlIG1vZGFscyBjYW4gY2xvc2UgcHJvZ3JhbW1hdGljYWxseVxuICAgICAgICAvLyB3ZSBjYW4ndCB0ZWxsLlxuICAgIH1cblxuICAgIHBvcCgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5fc3RhY2sucG9wKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlIGEgTW9kYWxEaWFsb2dJbnN0YW5jZSBmcm9tIHRoZSBzdGFjay5cbiAgICAgKiBAcGFyYW0gbUluc3RhbmNlXG4gICAgICovXG4gICAgcmVtb3ZlKG1JbnN0YW5jZTogTW9kYWxEaWFsb2dJbnN0YW5jZSk6IHZvaWQge1xuICAgICAgICBsZXQgaWR4ID0gdGhpcy5fc3RhY2suaW5kZXhPZihtSW5zdGFuY2UpO1xuICAgICAgICBpZiAoaWR4ID4gLTEpIHRoaXMuX3N0YWNrLnNwbGljZShpZHgsIDEpO1xuICAgICAgICBjb25zdCBET00gPSBnZXRET00oKTtcbiAgICAgICAgaWYgKERPTSAmJiB0aGlzLl9zdGFjay5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIERPTS5yZW1vdmVDbGFzcyhET00ucXVlcnkoJ2JvZHknKSwgJ21vZGFsLW9wZW4nKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG4gICAgaW5kZXgoaW5kZXg6IG51bWJlcik6IE1vZGFsRGlhbG9nSW5zdGFuY2Uge1xuICAgICAgICByZXR1cm4gdGhpcy5fc3RhY2tbaW5kZXhdO1xuICAgIH1cblxuICAgIGluZGV4T2YobUluc3RhbmNlOiBNb2RhbERpYWxvZ0luc3RhbmNlKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3N0YWNrLmluZGV4T2YobUluc3RhbmNlKTtcbiAgICB9XG5cbiAgICBnZXQgbGVuZ3RoKCk6IG51bWJlciB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zdGFjay5sZW5ndGg7XG4gICAgfVxufVxuIl19