"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var testing_1 = require('@angular/core/testing');
var polymer_element_1 = require('./polymer-element');
var testing_2 = require('@angular/compiler/testing');
var core_1 = require('@angular/core');
var common_1 = require('@angular/common');
var by_1 = require('@angular/platform-browser/src/dom/debug/by');
var platform_browser_1 = require('@angular/platform-browser');
var testing_3 = require('@angular/platform-browser-dynamic/testing');
testing_1.setBaseTestProviders(testing_3.TEST_BROWSER_DYNAMIC_PLATFORM_PROVIDERS, testing_3.TEST_BROWSER_DYNAMIC_APPLICATION_PROVIDERS);
var Polymer = window.Polymer;
testing_1.describe('PolymerElement', function () {
    var tcb;
    var template;
    var testElement;
    var testComponent;
    var fixture;
    testing_1.it('is defined', function () {
        testing_1.expect(polymer_element_1.PolymerElement).toBeDefined();
    });
    testing_1.it('is function', function () {
        testing_1.expect(typeof polymer_element_1.PolymerElement).toBe('function');
    });
    beforeEach(function (done) {
        if (template) {
            testing_1.inject([testing_2.TestComponentBuilder], function (tcb) {
                tcb.overrideTemplate(TestComponent, template).createAsync(TestComponent).then(function (_fixture) {
                    fixture = _fixture;
                    testElement = _fixture.debugElement.query(by_1.By.css('test-element')).nativeElement;
                    testComponent = _fixture.componentInstance;
                    done();
                });
            })();
        }
        else {
            done();
        }
    });
    testing_1.describe('Developer experience', function () {
        testing_1.it('should throw an error for non-registered elements', function () {
            try {
                polymer_element_1.PolymerElement('non-registered');
            }
            catch (error) {
                testing_1.expect(error.message).toContain('element "non-registered" has not been registered');
            }
        });
    });
    testing_1.describe('Two-way data binding', function () {
        beforeAll(function () {
            template = "\n        <test-element\n          [(value)]=\"value\"\n          [(nestedObject)]=\"nestedObject\"\n          [(arrayObject)]=\"arrayObject\">\n        </test-element>\n        ";
        });
        testing_1.it('should have initial bound value', function () {
            fixture.detectChanges();
            testing_1.expect(testElement.value).toEqual('foo');
        });
        testing_1.it('should change value on bound value change', function () {
            testComponent.value = 'bar';
            fixture.detectChanges();
            testing_1.expect(testElement.value).toEqual('bar');
        });
        testing_1.it('should change bound value on value change', function () {
            testElement.value = 'bar';
            testing_1.expect(testComponent.value).toEqual('bar');
        });
        testing_1.it('should reflect change to a nested value (object)', function () {
            testComponent.nestedObject.value = 'foo';
            fixture.detectChanges();
            var nested = Polymer.dom(testElement.root).querySelector('#nested');
            testing_1.expect(nested.getAttribute('nested-object-value')).toEqual('foo');
        });
        testing_1.it('should reflect change to a nested value (array)', function () {
            testComponent.arrayObject.push('foo');
            fixture.detectChanges();
            var nested = Polymer.dom(testElement.root).querySelector('#nested');
            testing_1.expect(nested.getAttribute('array-object-value')).toEqual('foo');
        });
    });
    testing_1.describe('Form field', function () {
        var form;
        beforeAll(function () {
            template = "\n        <form [ngFormModel]=\"form\">\n          <test-element ngControl=\"value\" required></test-element>\n        </form>\n        ";
        });
        beforeEach(function () {
            form = new common_1.ControlGroup({ "value": new common_1.Control() });
            fixture.debugElement.componentInstance.form = form;
            fixture.detectChanges();
        });
        testing_1.describe('Initial state', function () {
            testing_1.it('should be initially pristine', function () {
                testing_1.expect(testElement.classList.contains('ng-pristine')).toEqual(true);
            });
            testing_1.it('should be initially untouched', function () {
                testing_1.expect(testElement.classList.contains('ng-untouched')).toEqual(true);
            });
            testing_1.it('should be invalid', function () {
                testing_1.expect(testElement.classList.contains('ng-invalid')).toEqual(true);
            });
            testing_1.it('should be an invalid form', function () {
                testing_1.expect(form.valid).toEqual(false);
            });
            testing_1.it('should not reflect invalid state to element initially', function () {
                testing_1.expect(testElement.invalid).toEqual(false);
            });
        });
        testing_1.describe('after value has changed', function () {
            beforeEach(function () {
                testElement.value = 'qux';
                fixture.detectChanges();
            });
            testing_1.it('should be dirty on value change', function () {
                testing_1.expect(testElement.classList.contains('ng-dirty')).toEqual(true);
            });
            testing_1.it('should be a valid form', function () {
                testing_1.expect(form.valid).toEqual(true);
            });
            testing_1.it('should have correct value', function () {
                testing_1.expect(form.value.value).toEqual('qux');
            });
            testing_1.it('should be valid', function () {
                testing_1.expect(testElement.classList.contains('ng-valid')).toEqual(true);
            });
            testing_1.it('should reflect invalid state to testElement when value changed', function () {
                testElement.value = '';
                fixture.detectChanges();
                testing_1.expect(testElement.invalid).toEqual(true);
            });
        });
    });
    testing_1.describe('Light dom content', function () {
        beforeAll(function () {
            template = "\n        <test-element [(value)]=\"value\" class=\"hascontent\">\n          <div class=\"foo\">Foo</div>\n          <div class=\"bar selected\" *ngIf=\"barVisible\">Bar</div>\n          <div class=\"bar2\" *ngIf=\"barVisible\">Bar2</div>\n          <div class=\"baz selected\">Baz</div>\n          Qux\n\n        </test-element>\n        ";
        });
        beforeEach(function (done) {
            setTimeout(done, 0);
        });
        function contentParentChildren(contentParentId) {
            var selected = testElement.$[contentParentId];
            return Polymer.dom(selected).getDistributedNodes();
        }
        function containsChild(contentParentId, childClassName) {
            var children = contentParentChildren(contentParentId);
            return Array.prototype.filter.call(children, function (node) {
                return node.classList && node.classList.contains(childClassName);
            }).length > 0;
        }
        testing_1.it('should distribute correctly', function () {
            // Local dom
            testing_1.expect(containsChild('selected', 'foo')).toEqual(false);
            testing_1.expect(containsChild('all', 'foo')).toEqual(true);
            testing_1.expect(containsChild('selected', 'bar')).toEqual(false);
            testing_1.expect(containsChild('all', 'bar')).toEqual(false);
            testing_1.expect(containsChild('selected', 'baz')).toEqual(true);
            var hasQux = Array.prototype.filter.call(contentParentChildren('all'), function (node) {
                return node.textContent.indexOf('Qux') !== -1;
            });
            testing_1.expect(hasQux.length).toEqual(1);
            // Light dom
            testing_1.expect(Polymer.dom(testElement).querySelector('.foo')).not.toEqual(null);
        });
        testing_1.it('should support ngif', function (done) {
            testComponent.barVisible = true;
            fixture.detectChanges();
            // Distribution with polyfills is done with MutationObservers, so it is asynchronous
            setTimeout(function () {
                testing_1.expect(containsChild('selected', 'bar')).toEqual(true);
                testing_1.expect(containsChild('all', 'bar2')).toEqual(true);
                done();
            }, 0);
        });
    });
    testing_1.describe('DOM API', function () {
        beforeAll(function () {
            template = "\n        <test-element [(value)]=\"value\" class=\"hascontent\">\n          <div class=\"foo\" *ngFor=\"let item of arrayObject\">Foo {{item}}</div>\n          <div class=\"bar selected\" *ngIf=\"barVisible\">Bar</div>\n          <div class=\"bar2\" *ngIf=\"barVisible\">Bar2</div>\n          <div class=\"baz selected\">Baz</div>\n        </test-element>\n        ";
        });
        testing_1.it('should trigger one mutation after multiple operations', function (done) {
            var observerSpy = jasmine.createSpy('observerSpy');
            var domApi = Polymer.dom(testElement).observeNodes(observerSpy);
            testComponent.arrayObject = [1, 2, 3];
            fixture.detectChanges();
            testComponent.arrayObject.push(4);
            fixture.detectChanges();
            testComponent.arrayObject.pop();
            fixture.detectChanges();
            testComponent.arrayObject = [0, 1, 2];
            fixture.detectChanges();
            testComponent.barVisible = true;
            fixture.detectChanges();
            testComponent.barVisible = false;
            fixture.detectChanges();
            setTimeout(function () {
                testing_1.expect(observerSpy).toHaveBeenCalledTimes(1);
                done();
            }, 0);
        });
        testing_1.it('should have the correct adapter', function () {
            var functionName = function (fun) {
                var ret = fun.toString();
                ret = ret.substr('function '.length);
                ret = ret.substr(0, ret.indexOf('('));
                return ret;
            };
            var dom = platform_browser_1.__platform_browser_private__.getDOM();
            var adapterName = functionName(dom.constructor);
            if (Polymer.Settings.useShadow) {
                testing_1.expect(adapterName).toEqual("PolymerDomAdapter");
            }
            else {
                testing_1.expect(adapterName).toEqual("PolymerShadyDomAdapter");
            }
        });
    });
});
var TestComponent = (function () {
    function TestComponent() {
        this.value = 'foo';
        this.nestedObject = { value: undefined };
        this.arrayObject = [];
        this.barVisible = false;
    }
    TestComponent = __decorate([
        core_1.Component({
            selector: 'test-component',
            template: "",
            directives: [polymer_element_1.PolymerElement('test-element')]
        }), 
        __metadata('design:paramtypes', [])
    ], TestComponent);
    return TestComponent;
}());
//# sourceMappingURL=data:application/json;base64,