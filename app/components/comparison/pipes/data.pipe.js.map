{"version":3,"sources":["components/comparison/pipes/data.pipe.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,uBAAuC,eAAe,CAAC,CAAA;AASvD;IAEI,SAAS,CAAC,KAAkB,EAAE,IAAI,GAAe,EAAE;QAC/C,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;QAClB,EAAE,CAAA,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA,CAAC;YACZ,MAAM,CAAC,KAAK,CAAC;QACjB,CAAC;QACD,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,IAAI;YACrB,GAAG,CAAA,CAAC,IAAI,GAAG,IAAI,IAAI,CAAC,KAAK,CAAC,CAAA,CAAC;gBACvB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC;oBAAC,QAAQ,CAAC;gBAC9C,IAAI,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;gBAC3B,IAAI,MAAM,GAAkB,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;gBACpE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,EAAE,MAAM,EAAE,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAA,CAAC;oBAChG,MAAM,CAAC,KAAK,CAAC;gBACjB,CAAC;YACL,CAAC;YACD,MAAM,CAAC,IAAI,CAAC;QAChB,CAAC,CAAC,CAAA;IACN,CAAC;IAED,SAAS,CAAC,SAAwB,EAAE,OAAsB,EAAE,GAAW;QACnE,IAAI,KAAK,GAAW,GAAG,CAAC;QACxB,EAAE,CAAA,CAAC,CAAC,OAAO,CAAC,CAAA,CAAC;YACT,MAAM,CAAC,KAAK,CAAC;QACjB,CAAC;QACD,EAAE,CAAA,CAAC,GAAG,CAAC,CAAA,CAAC;YACJ,yDAAyD;YACzD,SAAS,CAAC,KAAK,CAAC,OAAO;gBACnB,EAAE,CAAA,CAAC,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAA,CAAC;oBAC7B,KAAK,GAAG,KAAK,CAAC;oBACd,MAAM,CAAC,KAAK,CAAC;gBACjB,CAAC;gBACD,MAAM,CAAC,IAAI,CAAC;YAChB,CAAC,CAAC,CAAC;QACP,CAAC;QAAA,IAAI,CAAA,CAAC;YACF,gCAAgC;YAChC,SAAS,CAAC,IAAI,CAAC,OAAO;gBAClB,EAAE,CAAA,CAAC,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAA,CAAC;oBAC9B,KAAK,GAAG,IAAI,CAAC;oBACb,MAAM,CAAC,IAAI,CAAC;gBAChB,CAAC;YACL,CAAC,CAAC,CAAA;QACN,CAAC;QACD,EAAE,CAAA,CAAC,CAAC,KAAK,IAAE,SAAS,CAAC,MAAM,IAAE,CAAC,CAAC,CAAA,CAAC;YAC5B,MAAM,CAAC,IAAI,CAAC;QAChB,CAAC;QACD,MAAM,CAAC,KAAK,CAAC;IACjB,CAAC;AACL,CAAC;AArDD;IAAC,WAAI,CAAC;QACF,IAAI,EAAE,YAAY;QAClB,IAAI,EAAE,KAAK;KAEd,CAAC;;YAAA;AACW,gBAAQ,WAgDpB,CAAA","file":"components/comparison/pipes/data.pipe.js","sourcesContent":["import { Pipe, PipeTransform }    from '@angular/core';\n\nimport { Data, Property } from './../shared/index';\n\n@Pipe({ \n    name: 'datafilter',\n    pure: false\n    \n})\nexport class DataPipe implements PipeTransform {\n    private query: any[];\n    transform(value: Array<Data>, args: Array<any> = []){\n        this.query = args;\n        if(!this.query){\n            return value;\n        }\n        return value.filter((item) => {\n            for(let key in this.query){\n                if (!this.query.hasOwnProperty(key)) continue;\n                let cont = this.query[key];\n                let values: Array<string> = item.getPropertyTags(cont.criteria.tag); \n                if (!((cont.values.length < 1) || (this.intersect(cont.values, values, cont.criteria.and_search)))){\n                    return false;\n                }\n            }\n            return true;\n        })   \n    }\n    \n    intersect(small_set: Array<string>, big_set: Array<string>, all:boolean){\n        var inter:boolean = all;\n        if(!big_set){\n            return false;\n        }\n        if(all){\n            // all elements from the small_set must be in the big_set\n            small_set.every(element => {\n                if(big_set.indexOf(element) < 0){\n                    inter = false;\n                    return false;\n                }\n                return true;\n            });            \n        }else{\n            // at least one elmenet must fit\n            small_set.some(element => {\n                if(big_set.indexOf(element) > -1){\n                    inter = true;\n                    return true;\n                }\n            })\n        }\n        if(!inter&&small_set.length==0){\n            return true;\n        }\n        return inter;\n    }\n}\n"],"sourceRoot":"/source/"}