{"version":3,"sources":["components/comparison/shared/components/table-data.set.ts"],"names":[],"mappings":";AAAA,wBAAiD,UAAU,CAAC,CAAA;AAE5D;IAEI,YAAY,OAAY;QADhB,iBAAY,GAAiC,EAAG,CAAA;QAEpD,OAAO,CAAC,OAAO,CAAC,GAAG;YACf,IAAI,IAAI,GAAa,IAAI,gBAAQ,EAAE,CAAC;YACpC,IAAI,MAAM,GAA8B,EAAG,CAAC;YAC5C,EAAE,CAAA,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA,CAAC;gBAChB,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG;oBACvB,IAAI,KAAK,GAAU,IAAI,aAAK,CAAC,GAAG,CAAC,IAAI,EAAE,GAAG,CAAC,WAAW,CAAC,CAAC;oBACxD,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,GAAG,CAAC,WAAW,CAAC;oBACnC,MAAM,CAAA,CAAC,GAAG,CAAC,KAAK,CAAC,CAAA,CAAC;wBACd,KAAK,eAAe;4BAChB,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;4BAC/B,KAAK,CAAC;wBACV,KAAK,eAAe;4BAChB,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;4BAC/B,KAAK,CAAC;wBACV,KAAK,cAAc;4BACf,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;4BAC9B,KAAK,CAAC;wBACV,KAAK,eAAe;4BAChB,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;4BAC/B,KAAK,CAAC;wBACV,KAAK,YAAY;4BACb,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;4BAC5B,KAAK,CAAC;wBACV,KAAK,eAAe;4BAChB,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;4BAC/B,KAAK,CAAC;oBACd,CAAC;gBACL,CAAC,CAAC,CAAA;YACN,CAAC;YACD,IAAI,IAAI,GAAS,IAAI,YAAI,CACrB,GAAG,CAAC,IAAI,CAAC,GAAG,EACZ,GAAG,CAAC,IAAI,CAAC,KAAK,EACd,IAAI,CACP,CAAA;YACD,IAAI,EAAE,GAAc,IAAI,iBAAS,CAC7B,GAAG,CAAC,IAAI,EACR,GAAG,CAAC,GAAG,EACP,GAAG,CAAC,MAAM,EACV,GAAG,CAAC,KAAK,EACT,GAAG,CAAC,OAAO,EACX,IAAI,EACJ,MAAM,EACN,GAAG,CAAC,IAAI,CACX,CAAA;YACD,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC;QACpC,CAAC,CAAC,CAAA;IACN,CAAC;IAEM,YAAY,CAAC,GAAW;QAC3B,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,GAAG,IAAI,iBAAS,EAAE,CAAC;IAC7E,CAAC;IAEM,iBAAiB;QACpB,IAAI,GAAG,GAAqB,IAAI,KAAK,EAAa,CAAC;QACnD,GAAG,CAAA,CAAC,IAAI,GAAG,IAAI,IAAI,CAAC,YAAY,CAAC,CAAA,CAAC;YAC9B,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC;gBAAC,QAAQ,CAAC;YACrD,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,CAAC;QACrC,CAAC;QACD,MAAM,CAAC,GAAG,CAAC;IACf,CAAC;AACL,CAAC;AA/DY,oBAAY,eA+DxB,CAAA","file":"components/comparison/shared/components/table-data.set.js","sourcesContent":["import { TableData, LabelCls, Value, Type } from '../index';\n\nexport class TableDataSet {\n    private tableDataSet: {[name: string]: TableData;} = { }\n    constructor(jsonObj: any){\n        jsonObj.forEach(obj => {\n            let lcls: LabelCls = new LabelCls();\n            var values: {[name: string]: string;} = { };\n            if(obj.type.values){\n                obj.type.values.forEach(val => {\n                    let value: Value = new Value(val.name, val.description);\n                    values[val.name] = val.description;\n                    switch(val.class){\n                        case \"label-success\": \n                            lcls.label_success.push(value);\n                            break;\n                        case \"label-warning\": \n                            lcls.label_warning.push(value);\n                            break;\n                        case \"label-danger\": \n                            lcls.label_danger.push(value);\n                            break;\n                        case \"label-default\": \n                            lcls.label_default.push(value);\n                            break;\n                        case \"label-info\": \n                            lcls.label_info.push(value);\n                            break;\n                        case \"label-primary\": \n                            lcls.label_primary.push(value);\n                            break;\n                    }\n                })\n            }\n            let type: Type = new Type(\n                obj.type.tag,\n                obj.type.class,\n                lcls    \n            )\n            let td: TableData = new TableData(\n                obj.name,\n                obj.tag,\n                obj.urlTag,\n                obj.style,\n                obj.display,\n                type,\n                values,\n                obj.sort\n            )\n            this.tableDataSet[obj.tag] = td;\n        })\n    }\n    \n    public getTableData(tag: string): TableData{\n        return this.tableDataSet[tag] ? this.tableDataSet[tag] : new TableData();\n    }\n    \n    public getTableDataArray(): Array<TableData>{\n        let set: Array<TableData> = new Array<TableData>();\n        for(let key in this.tableDataSet){\n            if (!this.tableDataSet.hasOwnProperty(key)) continue;\n            set.push(this.tableDataSet[key]);\n        }\n        return set;\n    }\n}"],"sourceRoot":"/source/"}